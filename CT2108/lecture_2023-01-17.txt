the physical layer
    theoretical basis for data communication
        fourier analysis
            a periodic signal with period T can be constructed as a sum of a number of sines and cosines
            fourier series:
                $g(t) = \frac{1}{2}c + \sum_{n=1}^{\inf}a_n sin(2 \pi n f t) + \sum_{n=1}^{\inf}b_n cos(2 \pi n f t)$

                where:
                    - f = 1/T
                    - a_n and b_n are the sine nand cosine amplitudes of the n^th harmonics
                    - c is a constant (the d/c component, relating to the voltage)

                    // the 2 pi n as n -> infinity is what produces the harmonics, 

            when we send digital data we have a high value and a low value corresponding to 1 and 0, and a "bit interval", i.e. the time it takes for one bit to be transmitted, so that 1111 could be held as high for the duration of the signal
            it's really hard to send these square waves through a physical medium such as a copper wire
            this is why the fourier analysis is important, as it allows the reconstruction of the square wave from other periodic signals


            bandwidth-limited signals
                let's consider the ascii character 'b' encoded in a byte (01100010)
                [[diagram]]
                we assume that it is a repeating pattern (isn't, but mathematically that doesn't matter)

                the fourier analysis gives the coefficients:
                [[diagram]]

                the root-mean-square (rms) amplitudes are of interest because they show the energy transmitted at those frequencies
                    // $rms_n = \root{a_n^2 + b_n^2}
                no transmission facility can transmit data without some loss of energy, and if every fourier component lost data equally, the signal would not be distorted, however in practice different mediums distort signals in different ways, resulting in corruption and attenuation of the signal

                the amplitudes that can be transmitted undiminished between 0 and frequency Fc (where Fc is F cut, measured in Hz), with all frequencies above Fc being attenuated, is the _bandwidth_
                    // in the real world, this isn't a hard cutoff, so often the point where half the power gets through is used
                                
                    [[diagram]]
                    - (b) here is solely the first harmonic, which is essentially unintelligible
                    - (c) adds in the second harmonic as well
                    [[diagram]]
                    - (d) and (e) are successive approximation, allowing for more accurate decoding

                this is why the loss of data at higher harmonics due to bandwidth limitations is a major obstacle

                    // how decoding works is by gauging the voltage at the midpoint of a bit-interval, and comparing to the ideal values 

        nyquist theorem
            the maximum rate at which data can be transmitted through a noiseless data channel
                max = 2 B log_2 V       [bits/sec]
            where:
                - B: bandwidth
                - V: the number of discrete levels of the signal transmitted through the channel

            // digital data must only have two levels (1 and 0), however the signal itself can be more complex -> can compress data
                this also means the number of levels to transmit digital data will always be a power of 2
                in the real world, not just voltage levels, but phase shifting and other techniques can be used to push the levels as high as 1024 (although that is uncommon)

            if random noise is present, then the situation deteriorates rapidly
                in reality there is always random noise
            the amount of thermal noise is measured by the snr, the signal to noise ratio (in decibels)
            
                $snr_{db} = 10 log_{10}(\frac{S}{N})

            shannon's theorem
                the absolute upper limit of a channel

                max = B log_2 (1 + \frac{S}{N})

                where:
                    - B: bandwidth of a noisy channel
                    - s/n: the snr of that channel

                demonstrates that the maximum data rate is limited by the amount of noise present, no matter the amount of signal levels used, or how frequently samples are taken

                used in practice: wifi access points actually dynamically changes the modulation rates they use based on the amount of noise detected, to match the capabilities of the open channel

            worked example
                a channel of 3000 Hz bandwidth (a phone line) has an snr ratio of 30 dB 
                the transmitted signal has 8 levels
                what is the maximum data rate this channel can accomodate?

                nyquist:    2 (3000) log_2 8 = 18,000 bits/sec = 18 kbps
                shannon:    3000 * log_2 (1 + 1000) = ~30,000 bits/sec = ~30 kbps
                    // have to convert from dB to a usable value

                go with the lower one, so 18 kbps

                what if the snr is 10 dB?

                shannon: 3000 * log_2 (1 + 10) = ~10,500 bits/sec

channel organisation
    any communications channel has a direction associated with it
    [[diagram]]
    - simplex: sender to receiver
    - half-duplex: shared channel that can be used to send and receiver
    - full duplex: separate channels for senders and receivers

    synchronisation
        the receiver should know the exact moment when data is valid
        synchronous channels
            data and timing information are sent separately (through separate or the same channel)
            the timing channel ptransmits clock pulses to the receiver
            upon receive of clock pulse, the receiver reads the data and latches it
            the data is not read again until the next clock pulse arrives
            however, this clock signal takes up a lot of bandwidth
            e.g.
                - usb
                - 12c
                - spi
        asynchronous channels
            no separate timing information used
            transmitter and receiver agree in advance on timings
            start and stop conditions are used
            accurate oscillators measure the bit widths
            e.g.
                - rs232
                - ethernet
                - wifi

    parallel communication
        [[diagram]]
        1) sender places data on the channel
        2) sender asserts "data available"
        3) receiver reads data and asserts "ready"
        4) sender de-asserts "data available" and it will be ready for a new data transfer

        would send multiple bits at the same time

        today only really used inside devices, old computers used to have a parallel port for printers or other peripherals

    serial communication
        [[diagram]]
        usually 8 message bytes at a time, uses start and stop bits to delineate message frames
        old serial ports did this bitwise, for ethernet or wifi their maximum frame size is over a thousand bytes

