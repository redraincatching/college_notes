binary subtraction
    case
        1: 0 - 0 (subtract 0) (borrow 0)
        2: 1 - 0 (subtract 0) (borrow 0)
        3: 1 - 1 (subtract 1) (borrow 0)
        4: 0 - 1 (subtract 1) (borrow 1)    // borrowing one full power
                                            // of the base, so here 2

    example:
        1010 - 111 = 11
        (see diagram)

power of two numbering systems
    binary - 2^1
    octal - 2^3
    hexadecimal - 2^4

    one octal digit can represent 3 binary digits (4|2|1)
    one hexadecimal digit represents 4 (8|4|2|1)
        easiest way to convert these is by grouping into "cells"

converting decimal to other bases
    divide by the base into which you're converting
        divide, get a quotient and remainder
        while quotient != 0
            divide the number by the new base
            make remainder next digit in the new base
            repeat, dividing into the quotient

    example: 680 to hex
        16^2 = 256
        16^1 = 16
        16^0 = 0

        680 / 256 = 2 r 168
            168 / 16 = 10 r 8
                8 / 1 = 8 r 0
        therefore, 680 in hex = 2A8    // each digit is the amount of times the
                                       // power divided in
           // if no remainder, all subsequent digits are 0

    other method:
            continually divide by the base itself until = 0
                remainder builds up

        example:
            512 to hexadecimal
                512 / 16 = 32 r 0
                32 / 16 = 2 r 0
                2 / 16 = 0 r 2
                    answer: 200

        decimal to octal
            example:
                375 to octal
                    375 / 8 = 46 r 7
                    46 / 8 = 5 r 6
                    5 / 8 = 0 r 5
                        answer: 567

        decimal to binary
            example:
                37 to binary
                    37 / 2 = 18 r 1
                    18 / 2 = 9 r 0
                    9 / 2 = 4 r 1
                    4 / 2 = 2 r 0
                    2 / 2 = 1 r 0
                    1 / 2 = 0 r 1
                        answer: 100101

fractions
    different between different bases
        e.g.
            base 10 1/3
                = 0.333333...
            base 3 1/3
                = 0.1
    strength of each digit is b * strength of its right neighbour
        where b is the base

        1000 in decimal is ten times bigger than 100.0
        100 in binary is twice as big as 10.0

    example
        decimal number - 0.2589
            -> 2*(1/10) + 5*(1/100) + 8*(1/1000) + 9*(1/10000)
            
        binary number - 0.101011
            -> 1*(1/2) + 0*(1/4) + 1*(1/8) + 0*(1/16) + 1*(1/32) + 1*(1/64)

        ternary number - 0.12201
            -> 1*(1/3) + 2*(1/9) + 2*(1/27) + 0*(1/81) + 1*(1/243)
                = 0.63374~ish

        0.110011 base 2 to base 10
            other method
            jump the binary point over (here, six spaces)
            find answer (51)
            divide by base ^ jumps (51/64)
            answer (0.76875)
