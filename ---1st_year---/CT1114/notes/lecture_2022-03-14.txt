asynchronous programming in javascript
    javascript is designed to deal with asynchronous situations
        - waiting for resources to arrive over the internet (ajax)
        - waiting for user interaction (onclick)
        - waiting for time to pass (setTimeout)

    callbacks are an elegant way to deal with this
        - sending functions as parameters to other functions

    callbacks can use named or anonymous functions
        // note: remember that functions are objects

        sample code - custom dialog box
            <div id="divAlert" style="position:absolute; width:100%; height:100%; overflow:hidden; left:0px; top:0px; text-align:center; display:none; background-color:rgba(0, 0, 0, 0.9); z-index:3;">
                <div style="position:absolute; left:50%; top:50%; width:75%; transform: translate(-50%, -60%); z-index:4;">
                    <h1 id='alertHeading'></h1>
                    <p id='alertMsg'></p>
                    <a class="btn blue" onclick="onClickedAlertOk();">OK</a>
                    <a class="btn blue" onclick="onClickedAlertCancel();">Cancel</a>
                </div>
            </div>

            // TODO: copy the code into here

        sending callbacks as named functions
            function clicked_exit_game() {
                confirm("are you sure?", "exit game", confirm_exit_game, cancel_exit_game);
            }

            function confirm_exit_game() {
                // do this
            }

            function cancel_exit_game() {
                // do this instead
            }

        sending callbacks as anonymous function
            // NOTE: ooh, this is spicy...
            function clicked_exit_game() {
                confirm("are you sure?", "exit game", function(){
                    // do thing
                }, function() {
                    // do other thing
                });
            }


javascript es6
    new ways to declare variables - const and let
    new array methods - map, reduce, filter
    alternatives to callbacks for asynchronous programming - promises, async/await
        // not looking at these this year, however

    var vs let vs const
        var - function scope
            if a variable is declared anywhere in a function, it has function scope, this is called "hoisting"
        let - block scope
            like a variable in c
        const - block scope
            a keyword which stops values from changing

    .map(callback)
        a new array method in es6
        traverses the array left to right, performing the callback function on every element, and returning the new array
    .filter(callback)
        traverses the array ltr and returns a boolean identifying whether the element will be kept or discarded
    .reduce(callback, initial_val)
        for finding a cumulative or concatenated value for every element of the array
        returns cumulative + initial_val

    arrow syntax
        anonymous functions can be defined one of two ways
            var x = function(x, y) {
                return x * y;
            }
            // or
            const x = (x, y) => x * y;
                // note: the return argument can be omitted if it is single line
