// note: spotify's recommender is available throught the api, with specific sorting constraints that we can put in ourselves

REST principles - representational state transfer
    allows for dynamic rendering
    https://en.wikipedia.org/wiki/Representational_state_transfer


https://api.spotify.com - base address
    the web api provies its own set of endpoints
    https://api.spotify.com/v1
        -> base uri for all apu requests

web api uses http verbs where possible
    GET    - retrieves resources
    POST   - creates resources
    PUT    - change or replace resources or collections
    DELETE - deletes resources

spotify uris and ids
    spotify uri
        the resourse identifier for a specific artist, track, etc.
        e.g. spotify:track:6rqhFgbbKwnb9MLmUQDhG6
    spotify id
        the unique base62 identifier at the end of a uri
    spotify category id
        the unique string specifying the category/genre
    spotify user id
        can be obtained via the web api endpoint
    spotify url
        a html link to a track, playlist, etc.

    
responses
    often include a json object
    see https://developer.spotify.com/documentation/web-api/reference/#/

    status codes
        200 - ok
        201 - created
        202 - accepted
        204 - no content; request accepted but message has no body
        304 - not modified
        400 - bad request
        401 - unauthorised
        403 - forbidden
        404 - not found
        429 - too many requests
        500 - internal server error
        502 - bad gateway
        503 - service unavailable

        response schema
            auth error object
                "error": "error",
                "error decription": "description"
            regular error object
                "status": <err_no>,
                "message": "message"


https://developer.spotify.com/documentation/web-api/libraries/


https://github.com/thelinmichael/spotify-web-api-node

