hash algorithms
    https://defuse.ca/checksums.htm
    - defuse, an online checksum calculator

    reverse-engineer passwords?
        hashes are, in theory, one-way funcions, so this should not be possible

    dictionary-based brute-force search
        dictionary search can be used to systematically identify a match for a given hash value
            - the underlying hash function must be known
        dictionaries are based on large word, password, or phrase collections
            pros:
                - straightforward
            cons:
                - significant computational effort to find a match
                - no guaranteed result
        
        https://crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm
        - crackstation's dictionary

    lookup table-based attacks
        for a given hash function and dictionary
        calculate hash value for all entries
        store both values in a table, sorted in order of hash value
            -> the lookup table
        binary search can now be used

        pros:
            - can be gnerated offline
            - search process itself is fast, O(log_2(n))
        cons:
            - massive table (for each function)
            - no guaranteed result

        https://crackstation.net/
        - crackstation free hash cracker (lookup table)

    rainbow tables
        uses less processing time and more storage than a brute-force attack
        uses more processing time and less storage than a lookup table

        -> space-time tradeoff