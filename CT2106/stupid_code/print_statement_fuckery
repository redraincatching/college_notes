current fuel status:
car body:
engine model:
turns per litre:
total wheel turns:
wheel model:
wheel radius:
wheel circumference:
distance this trip:
total distance:
-------------------------
(25)

%-25s %d l\n
%-25s %s\n
%-25s %s\n
%-25s %d\n
%-25s %d\n
%-25s %s\n
%-25s %.2f m\n
%-25s %.2f m\n
%-25s %.2f km\n
%-25s %.2f km\n\n

"%-25s %d l\n%-25s %s\n%-25s %s\n%-25s %d\n%-25s %d\n%-25s %s\n%-25s %.2f m\n%-25s %.2f m\n%-25s %.2f km\n%-25s %.2f km\n\n"

this.engine.get_fuel(),
name,
this.engine.get_name(),
this.engine.get_tpl(),
this.engine.get_num_turns(),
this.engine.get_wheel_name(),
this.engine.get_radius(),
this.engine.get_circ(),
this_trip,
total_km

"current fuel status:"
this.engine.get_fuel(),
"car body:"
name,
"engine model:"
this.engine.get_name(),
"turns per litre:"
this.engine.get_tpl(),
"total wheel turns:"
this.engine.get_num_turns(),
"wheel model:"
this.engine.get_wheel_name(),
"wheel radius:"
this.engine.get_radius(),
"wheel circumference:"
this.engine.get_circ(),
"distance this trip:"
this_trip,
"total distance:"
total_km

"current fuel status:", this.engine.get_fuel(), "car body:", name, "engine model:", this.engine.get_name(), "turns per litre:", this.engine.get_tpl(), "total wheel turns:", this.engine.get_num_turns(), "wheel model:", this.engine.get_wheel_name(), "wheel radius:", this.engine.get_radius(), "wheel circumference:", this.engine.get_circ(), "distance this trip:", this_trip, "total distance:", total_km

System.out.printf("%-25s %d l\n%-25s %s\n%-25s %s\n%-25s %d\n%-25s %d\n%-25s %s\n%-25s %.2f m\n%-25s %.2f m\n%-25s %.2f km\n%-25s %.2f km\n\n", "current fuel status:", this.engine.get_fuel(), "car body:", name, "engine model:", this.engine.get_name(), "turns per litre:", this.engine.get_tpl(), "total wheel turns:", this.engine.get_num_turns(), "wheel model:", this.engine.get_wheel_name(), "wheel radius:", this.engine.get_radius(), "wheel circumference:", this.engine.get_circ(), "distance this trip:", this_trip, "total distance:", total_km);


String.format()
    can use to return a string formatted using these specifiers


%a	- floating point (except bigdecimal)	
    returns hex output of floating point number.
%b	- any type	
    "true" if non-null, "false" if null
%c	- character	
    unicode character
%d	- integer (incl. byte, short, int, long, bigint)	
    decimal integer
%e	- floating point	
    decimal number in scientific notation
%f	- floating point	
    decimal number
%g	- floating point	
    decimal number, possibly in scientific notation depending on the precision and value.
%h	- any type	
    hex string of value from hashcode() method.
%n	- none	
    platform-specific line separator.
%o	- integer (incl. byte, short, int, long, bigint)	
    octal number
%s	- any type	
    string value
%t	- date/time (incl. long, calendar, date and temporalaccessor)	
    %t is the prefix for date/time conversions. more formatting flags are needed after this. see date/time conversion below.
%x	- integer (incl. byte, short, int, long, bigint)	
    hex string.

