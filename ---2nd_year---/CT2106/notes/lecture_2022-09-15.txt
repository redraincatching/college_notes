class structure
    every class has the following structure

        <access modifier> class <name> {
            <fields>
            <constructors>
            <methods>
        }

        fields
            store values for an object
            known as _instance variables_
            fields define the state of the object

        constructors
            - initialise an object
            - no return type keyword
            - have the same name as their class
            - close association with the fields
                - initial values are stored in the fields through this
                - parameter values often used for this

            two ways to implement constructors
                - different naming scheme
                    public bicycle(int gr, int spd) {
                        gear = gr;
                        speed = spd;
                    }
                - "this" keyword
                    public bicycle(int gear, int speed) {
                        this.gear = gear;
                        this.speed = speed;
                    }

        methods
            implement the behaviour of an object
            have a consistent structure of header and body
                header
                    public int get_speed()

                    - visibility
                    - return type
                    - name
                    - arguments

                body
                    ... {
                        // do code
                        return x;
                    }

                    - encloses the method's statements


principle 1 of object oriented programming - encapsulation
    the variables of a class should be hidden from other classes, and should only be accessible through their own methods
        "data hiding"
    each object is responsible for its own data

    see: "access modifiers"


c vs java
    [[diagram]]
    - unlike c, an oop program will not have a pool of global variables that each method can access
    - each object has its own data, and others use accessor methods to access it

    accessor methods receive data, mutators alter data
        basic form of both, the getter and setter methods

        a setter does not have to assign unconditionally to the fields, these parameters may be checked for validity
            -> protective mutators

    printing
        System.out.println();
            closer to puts than printf, although supports string concatenation
            follows whatever it prints with a newline character
            e.g.
                System.out.println("the winner is " + winner + "!");
        System.out.printf();
            (shockingly) more similar to printf
            no newline character added automatically
            e.g.
                System.out.printf("you win â‚¬%d!\n", amount);

            like c, java follows this format for its format specifiers
                %[flags][width][.precision]conversion-char

            // note, java supports %n as well as \n, which prints a system-specific newline character
            // %S will print an uppercase string
            // the - flag will left-justify the string
            // %e outputs scientific notation
